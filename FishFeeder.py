#Meow!
#tkinker allows us to make a graphical user interface, but we need to import the gui made with PAGE first
#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Jan 22, 2019 07:04:29 PM +0200  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import FishFeeder_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    FishFeeder_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    FishFeeder_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450+491+149")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.LabelWeightFrame = tk.LabelFrame(top)
        self.LabelWeightFrame.place(relx=0.35, rely=0.556, relheight=0.167
                , relwidth=0.25)
        self.LabelWeightFrame.configure(relief='groove')
        self.LabelWeightFrame.configure(foreground="black")
        self.LabelWeightFrame.configure(text='''Average weight''')
        self.LabelWeightFrame.configure(background="#d9d9d9")
        self.LabelWeightFrame.configure(highlightbackground="#d9d9d9")
        self.LabelWeightFrame.configure(highlightcolor="black")
        self.LabelWeightFrame.configure(width=150)

        self.WLabel = ttk.Label(self.LabelWeightFrame)
        self.WLabel.place(relx=0.067, rely=0.267, height=49, width=126
                , bordermode='ignore')
        self.WLabel.configure(background="#d9d9d9")
        self.WLabel.configure(foreground="#000000")
        self.WLabel.configure(font="TkDefaultFont")
        self.WLabel.configure(relief='flat')
        self.WLabel.configure(text='''Wlabel''')
        self.WLabel.configure(width=126)

        self.LabelLengthFrame = tk.LabelFrame(top)
        self.LabelLengthFrame.place(relx=0.083, rely=0.556, relheight=0.167
                , relwidth=0.25)
        self.LabelLengthFrame.configure(relief='groove')
        self.LabelLengthFrame.configure(foreground="black")
        self.LabelLengthFrame.configure(text='''Average length''')
        self.LabelLengthFrame.configure(background="#d9d9d9")
        self.LabelLengthFrame.configure(highlightbackground="#d9d9d9")
        self.LabelLengthFrame.configure(highlightcolor="black")
        self.LabelLengthFrame.configure(width=150)

        self.LabelLengthInside = ttk.Label(self.LabelLengthFrame)
        self.LabelLengthInside.place(relx=0.067, rely=0.267, height=49, width=126
                , bordermode='ignore')
        self.LabelLengthInside.configure(background="#d9d9d9")
        self.LabelLengthInside.configure(foreground="#000000")
        self.LabelLengthInside.configure(font="TkDefaultFont")
        self.LabelLengthInside.configure(relief='flat')
        self.LabelLengthInside.configure(text='''LabelL''')
        self.LabelLengthInside.configure(width=126)

        self.TestingEntry = tk.Entry(top)
        self.TestingEntry.place(relx=0.1, rely=0.156,height=20, relwidth=0.323)
        self.TestingEntry.configure(background="white")
        self.TestingEntry.configure(disabledforeground="#a3a3a3")
        self.TestingEntry.configure(font="TkFixedFont")
        self.TestingEntry.configure(foreground="#000000")
        self.TestingEntry.configure(highlightbackground="#d9d9d9")
        self.TestingEntry.configure(highlightcolor="black")
        self.TestingEntry.configure(insertbackground="black")
        self.TestingEntry.configure(selectbackground="#c4c4c4")
        self.TestingEntry.configure(selectforeground="black")

        self.TLabel1 = ttk.Label(top)
        self.TLabel1.place(relx=0.1, rely=0.111, height=19, width=71)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief='flat')
        self.TLabel1.configure(text='''Enter length''')

        self.SubmitTest = tk.Button(top)
        self.SubmitTest.place(relx=0.1, rely=0.222, height=24, width=38)
        self.SubmitTest.configure(activebackground="#ececec")
        self.SubmitTest.configure(activeforeground="#000000")
        self.SubmitTest.configure(background="#d9d9d9")
        self.SubmitTest.configure(disabledforeground="#a3a3a3")
        self.SubmitTest.configure(foreground="#000000")
        self.SubmitTest.configure(highlightbackground="#d9d9d9")
        self.SubmitTest.configure(highlightcolor="black")
        self.SubmitTest.configure(pady="0")
        self.SubmitTest.configure(text='''Enter''')

if __name__ == '__main__':
    vp_start_gui()

def retrieve_input():
    input = self.TestingEntry.get("1.0",'end-1c')

#Declering some important veriables. 
#lengthinput is set to float as values might not be an integer
#listlength decleres how many values we store before calculating the average length
listlength=5
n = 0
fishlength = []
while n < listlength :
    #for testing purpuse im using user input, in the future i will will use image recognition 
    fishlength.append(input)
    n += 1
#declering the average length
avglength = (sum(fishlength)/len(fishlength))
#calculating the average weight
weight = 0.0065 * (avglength ** 3.1572)
#printing the average length and weight
print("average length: " + str(avglength))
print("average weight: " + str(weight))
